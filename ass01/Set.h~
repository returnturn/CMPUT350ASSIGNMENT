#ifndef Set_H
#define Set_H

#include <iostream>
#include <cstdlib>

// represents a set of integers 0..n-1

class Set
{
 public:

  Set(size_t n_){
    // create empty subset of {0..n-1}
    n=n_;
    a=n/32;
    if(n%32){
      a++;
    }
    bits = new unsigned int[a];
    clear();
  }
  ~Set(){
    // destructor
    delete []bits;
  }
  Set(const Set &s){
    // copy constructor
    n=s.n;
    a=s.a;
    for(size_t i=0;i<a;i++){
      bits[i]=s.bits[i];
    }
  }
  Set &operator=(const Set &s){
    // assignment operator
    if(this==&s){
      return *this;
    }
    n=s.n;
    a=s.a;
    for(size_t i=0;i<a;i++){
      bits[i]=s.bits[i];
    }
    return *this;
  }

  void clear(){
    // empty set
    for(size_t i=0;i<a;i++){
      bits[i]=0;
    }
  }
  void complement(){
    // negate set (x was in set before <=> x is not in set after)
    for(size_t i=0;i<a;i++){
      bits[i] = ~bits[i];
    }
  }
  bool has(size_t x) const{
    // return true iff x is element of set (0 <= x < n)
    int posA=x/32;
    int posB=(x%32);
    int num=bits[posA];
    num=(num<<posB)>>31;
    return num&1U;
  }
  void add(size_t x){
    // add element x to set (0 <= x < n)
    int posA=x/32;
    int posB=31-(x%32);
    bits[posA] |= (1U<<posB);
  }
  void remove(size_t x){
    // remove element x from set (0 <= x < n)
    int posA=x/32;
    int posB=31-(x%32);
    bits[posA] &= ~(1U<<posB);
  }

  // add all elements of s to set; pre-cond: s.n == n
  void add(const Set &s){
    for(size_t i=0;i<a;i++){
      bits[i] |= s.bits[i];
    }
  }

  // remove all elements of s from set; pre-cond: s.n == n
  void remove(const Set &s){
    for(size_t i=0;i<a;i++){
      bits[i] &= ~(s.bits[i]);
    }
  }

  // return maximum number of elements
  size_t get_n() const { return n; }

  // print elements to output stream os (default std::cout) like so:
  // [ 1 2 4 5 ]
  // for set {1,2,4,5} (no extra spaces, no newline characters)
  void print(std::ostream &os = std::cout) const{
    unsigned int count=0;
    os<<"[ ";
    for(size_t i=0;i<a;i++){
      int num=bits[i],out;
      for(int j=0;j<32;j++){
	out=((num<<j)>>31)&1;
	if(out){
	  os<<count<<" ";
	}
	count++;
	if(count==n){
	  break;
	}
      }
    }
    os<<"]";
  }

 private:

  unsigned int *bits; // array of integers storing bits (x in set <=> bit x = 1)
  size_t n;  // max. number of elements (elements are 0,1,...n-1)
  size_t a;  // number of allocated ints
  //static const INT_BITS=sizeof(int)*8;
  // you may add private helper functions here, or *constant* data,
  // but no other member functions or data or function implementations
};

#endif
